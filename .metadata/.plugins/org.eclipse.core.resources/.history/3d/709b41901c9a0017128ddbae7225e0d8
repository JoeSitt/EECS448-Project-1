package scheduler;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.TreeSet;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;



public class Event {
	
	private Date date;
	private String name;
	private List<Attendee> attendees;
	
	public Event(Date date, String name) {
		this.date = date;
		this.name = name;
		this.attendees = new ArrayList<Attendee>();
	}
	
	/*
	 * Returns the stored date, formatted as requested.
	 */
	// TODO(cmaxcy):
	// - Test
	// - Consider checking if date format passed is valid
	public String getDateString(String dateFormat) {
		
		if (!isDateFormatValid(dateFormat)) {
			return "ERROR: invalid date format";
		}
		
		return formatDate(this.date, dateFormat);
	}
	
	/*
	 * Returns whether or not dateFormat is a useable representation of a date
	 */
	// TODO(cmaxcy): test
	public static boolean isDateFormatValid(String dateFormat) {
		try {
			new SimpleDateFormat(dateFormat);
		} catch(Exception e) {
			return false;
		}
		
		return true;
	}
	
	/*
	 * Returns date string representation according to format.
	 */
	// TODO(cmaxcy): test
	public static String formatDate(Date date, String dateFormat) {
		
		if (!isDateFormatValid(dateFormat)) {
			return "ERROR: invalid date format";
		}
		
		SimpleDateFormat format = new SimpleDateFormat(dateFormat);
		return format.format(date);
	}
	
	/*
	 * Returns whether or not the date string passed is valid.
	 * A date string is considered valid if it follows the passed format and exists.
	 * Date format string is assumed to be valid (have already passed an
	 * isDateFormatValid(...) check).
	 * 
	 * NOTE: Because of the specificity of the method, a check is not performed on the
	 * dateFormat string. If this had been done, and false had been returned, it would 
	 * give a misleading result.
	 */
	// TODO(cmaxcy): test
	public static boolean isDateStringValid(String dateString, String dateFormat) {
		
		SimpleDateFormat format = new SimpleDateFormat(dateFormat);
		format.setLenient(false);
		
		// Attempt parsing of dateString
		try {
			format.parse(dateString);
		} catch(Exception e) {
			return false;
		}
		
		// date string must be valid
		return true;
	}
	
	/*
	 * Parse date from string. String is expected to follow passed date format.
	 * Method will return null if format is not followed.
	 */
	// TODO(cmaxcy): test
	public static Date parseDate(String dateString, String dateFormat) {
		
		if (!isDateFormatValid(dateFormat)) {
			return null;
		}
		
		SimpleDateFormat format = new SimpleDateFormat(dateFormat);
		format.setLenient(false);
		Date date;
		
		// Attempt parsing of dateString
		try {
			date = format.parse(dateString);
		} catch(Exception e) {
			return null;
		}
		
		// date string must be valid
		return date;
	}
	
	public ArrayList<Attendee> getAttendees() {
		return new ArrayList<Attendee>(attendees);
	}
	
	public Date getDate() {
		return this.date;
	}
	
	public String getName() {
		return this.name;
	}
	
	public static void main(String[] args) {
		
		// Generate date for testing
		Date date = new Date();
		
		System.out.println(date);
		
		String goodFormat1 = "MM/dd/yyyy";
		String goodFormat2 = "MM-dd-yyyy";
		
		String badFormat1 = "b";
		String badFormat2 = "nb//a/a/b";
		
		System.out.println("Good date formattings:");
		System.out.println(Event.formatDate(date, goodFormat1));
		System.out.println(Event.formatDate(date, goodFormat2));
		System.out.println();
		
		System.out.println("Invalid date formattings:");
		System.out.println(Event.formatDate(date, badFormat1));
		System.out.println(Event.formatDate(date, badFormat2));
		System.out.println();
		

	}
}
