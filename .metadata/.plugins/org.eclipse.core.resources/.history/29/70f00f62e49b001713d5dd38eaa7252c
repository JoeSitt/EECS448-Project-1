package scheduler;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TreeSet;
import java.io.Serializable;
import java.text.SimpleDateFormat;

/**
 * Encapsulates an Event. Contains methods for extracting date from string input. 
 * Date format is strictly "MM/dd/yyyy"
 * 
 * References:
 * https://stackoverflow.com/questions/999172/how-to-parse-a-date
 * https://docs.oracle.com/javase/8/docs/api/java/util/Date.html
 */
public class Event implements Serializable {
	
	private Date date;
	private String name;
	private TreeSet<User> users;
	
	public static String dateFormat = "MM/dd/yyyy";
	
	// Required for serialization
	private static final long serialVersionUID = 1L;
	
	public Event(Date date, String name) {
		this.date = date;
		this.name = name;
		this.users = new TreeSet<User>();
	}
	
	/**
	 * Add user to event. User names must be distinct
	 * 
	 * @param user New user
	 * @return True only if new user was successfully added.
	 */
	public boolean addUser(User user) {
		if (users.contains(user)) {
			return false;
		}
		users.add(user);
		return true;
	}
	
	/**
	 * @return Event name.
	 */
	public String getName() {
		return name;
	}
	
	/**
	 * @return List of users.
	 */
	public List<User> getUsers() {
		return new ArrayList<User>(users);
	}
	
	/**
	 * Describes date using specific format.
	 * @param date Date to be formatted.
	 * @return String representation of the date, error string if date is null.
	 */
	public static String formatDate(Date date) {
		if (date == null) {
			return "ERROR: null date encountered";
		}
		return "";  // TEMP
	}
	
	/**
	 * @return Formatted date string.
	 */
	public String getDateString() {		
		return new SimpleDateFormat(dateFormat).format(date);
	}
	
	/**
	 * Signals whether passed date string is correctly formatted and refers to a real date.
	 * 
	 * @param dateString String representation of the date.
	 * @return True only if date string is formatted correctly and date exists.
	 */
	public static boolean isDateStringValid(String dateString) {
		try {
			SimpleDateFormat format = new SimpleDateFormat(dateFormat);
			format.setLenient(false);
			format.parse(dateString);
		} catch(Exception e) {
			return false;
		}
		return true;
	}
	
	/**
	 * Parses date from formatted string.
	 * 
	 * @param dateString String representation of date.
	 * @return Date only if parsing is successful and date exists.
	 */
	public static Date parseDateString(String dateString) {
		Date date;
		try {
			SimpleDateFormat format = new SimpleDateFormat(dateFormat);
			format.setLenient(false);
			date = format.parse(dateString);
		} catch(Exception e) {
			return null;
		}
		return date;
	}
	
//	/*
//	 * Returns the stored date, formatted as requested.
//	 */
//	public String getDateString(String dateFormat) {
//		return formatDate(this.date, dateFormat);
//	}
//	
//	/*
//	 * Returns whether or not dateFormat is a use-able representation of a date
//	 * 
//	 * WARNING: Set of allowed date formats is extensive.
//	 * Consult http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html
//	 */
//	public static boolean isDateFormatValid(String dateFormat) {
//		try {
//			new SimpleDateFormat(dateFormat);
//		} catch(Exception e) {
//			return false;
//		}
//		
//		return true;
//	}
//	
//	/*
//	 * Returns date string representation according to format.
//	 * If invalid format passed, string indicating this is returned.
//	 * If null date passed, string indicating this is returned.
//	 */
//	public static String formatDate(Date date, String dateFormat) {
//		
//		if (date == null) {
//			return "ERROR: null date passed";
//		}
//		
//		if (!isDateFormatValid(dateFormat)) {
//			return "ERROR: invalid date format";
//		}
//		SimpleDateFormat format = new SimpleDateFormat(dateFormat);
//		return format.format(date);
//	}
//	
//	/*
//	 * Returns whether or not the date string passed is valid.
//	 * A date string is considered valid if it follows the passed format and exists.
//	 * Date format string is assumed to be valid (have already passed an
//	 * isDateFormatValid(...) check).
//	 * 
//	 * NOTE: Because of the specificity of the method, a check is not performed on the
//	 * dateFormat string. If this had been done and false had been returned, it would 
//	 * give a misleading result.
//	 */
//	public static boolean isDateStringValid(String dateString, String dateFormat) {
//		
//		SimpleDateFormat format = new SimpleDateFormat(dateFormat);
//		format.setLenient(false);
//		
//		// Attempt parsing of dateString
//		try {
//			format.parse(dateString);
//		} catch(Exception e) {
//			return false;
//		}
//		
//		// date string must be valid
//		return true;
//	}
//	
//	/*
//	 * Parse date from string. String is expected to follow passed date format.
//	 * Method will return null if format is not followed or parsing is unsuccessful.
//	 */
//	public static Date parseDate(String dateString, String dateFormat) {
//		
//		if (!isDateFormatValid(dateFormat)) {
//			return null;
//		}
//		
//		SimpleDateFormat format = new SimpleDateFormat(dateFormat);
//		format.setLenient(false);
//		Date date;
//		
//		// Attempt parsing of dateString
//		try {
//			date = format.parse(dateString);
//		} catch(Exception e) {
//			return null;
//		}
//		
//		// date string must be valid
//		return date;
//	}
//	
//	public String getDescritpion(boolean useMil) {
//		String outStr = name;
//		// TODO(cmaxcy): run through attendees and add summary to string
//		return outStr;
//	}
//	
//	public List<Attendee> getAttendees() {
//		return attendees;
//	}
//	
//	public Date getDate() {
//		return this.date;
//	}
//	
//	public String getName() {
//		return this.name;
//	}
}
