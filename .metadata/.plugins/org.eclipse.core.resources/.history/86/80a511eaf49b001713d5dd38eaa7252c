package scheduler;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TreeSet;

/**
 * Used to store a set of events. Instances can be read and written to file.
 * 
 * References:
 * https://stackoverflow.com/questions/447898/what-is-object-serialization
 */
public class Manager implements Serializable {
	
	private TreeSet<Event> events;
	private String fileName;
	
	// Required for serialization
	private static final long serialVersionUID = 1L;
	
	/**
	 * @return List of events.
	 */
	public List<Event> getEvents() {
		return new ArrayList<Event>(events);
	}
	
	public static Manager makeManager(String fileName) {
		
		if (doesFileExist(fileName)) {
			try {
				return read(fileName);
			} catch(Exception e) {
				System.out.println(e.getMessage());
				System.out.println("ERROR: could not read manager file");
				return null;
			}
		}
		
		return new Manager(fileName);
	}
	
	private Manager(String fileName) {
		this.fileName = fileName;
		this.events = new TreeSet<Event>();
	};
	
	/**
	 * Returns whether or not a file exists
	 * 
	 * https://stackoverflow.com/questions/1816673/how-do-i-check-if-a-file-exists-in-java
	 * 
	 * @param fileName
	 * @return
	 */
	public static boolean doesFileExist(String fileName) {
		File f = new File(fileName);
		if (f.exists() && !f.isDirectory()) {
			return true;
		}
		return false;
	}
	
	/**
	 * Add event to event set. Event must have unique name.
	 * 
	 * @param event New event to be added.
	 * @return True only if the event was successfully added.
	 */
	public boolean addEvent(Event event) {
		if (events.contains(event)) {
			return false;
		}
		events.add(event);
		return true;
	}
	
	/**
	 * Write current state of instance to file.
	 * 
	 * @throws IOException If an error is encountered during the writing.
	 */
	public void write() throws IOException {
		
		FileOutputStream f = new FileOutputStream(new File(fileName));
		ObjectOutputStream o = new ObjectOutputStream(f);
		
		o.writeObject(this);
		
		// close file writing objects
		o.close();
		f.close();
	}
	
	/*
	 * Reads and constructs instance from file
	 */
	public static Manager read(String fileName) throws IOException, ClassNotFoundException {
		FileInputStream fi = new FileInputStream(new File(fileName));
		ObjectInputStream oi = new ObjectInputStream(fi);

		Manager pr1 = (Manager) oi.readObject();

		// close file reading objects
		oi.close();
		fi.close();
		
		return pr1;
	}
}
